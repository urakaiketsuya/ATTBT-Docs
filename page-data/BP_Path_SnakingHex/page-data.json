{"componentChunkName":"component---src-templates-blog-post-js","path":"/BP_Path_SnakingHex/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"5f94713f-65fe-5e7b-a2fa-7d63cbcc8365","excerpt":"BP_Path_SnakingHex Path: /Game/AdvancedTurnBasedTileToolkit/Core/Pathfinding/BP_Path_SnakingHex .. cpp:class:: BP_Path_SnakingHex : public BP_Path_C Variantâ€¦","html":"<h1>BP_Path_SnakingHex</h1>\n<p>Path: /Game/AdvancedTurnBasedTileToolkit/Core/Pathfinding/BP_Path_SnakingHex</p>\n<p>.. cpp:class:: BP_Path_SnakingHex : public BP_Path_C</p>\n<p>Variant pathfinding for hexagonal grids that prefers that units move in a snaking path between tiles over long curved lines, in cases where the move cost is equal. Might look better than standard pathfinding for huge open maps with long move ranges.</p>\n<p>.. cpp:function:: (exec, FPathfindingIndex) SearchAndAddAdjacentTiles(exec then, int SearchStep=0, int Paths, int Move=0, FPathfindingIndex OpenListTiles, FPathfindingIndex DelayedSearchTiles)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg SearchStep: Search Step Integer (by ref) (Default: 0)\n  :type SearchStep: int\n  :arg Paths: Paths Map of Integers to FPathfinding Structures\n  :type Paths: int\n  :arg Move: Move Integer (by ref) (Default: 0)\n  :type Move: int\n  :arg OpenListTiles: Open List Tiles Array of FPathfinding Index Structures\n  :type OpenListTiles: FPathfindingIndex\n  :arg DelayedSearchTiles: Delayed Search Tiles Array of FPathfinding Index Structures\n  :type DelayedSearchTiles: FPathfindingIndex\n  :returns execute: \n  :rtype execute: exec\n  :returns OpenListChildTiles: Open List Child Tiles Array of FPathfinding Index Structures\n  :rtype OpenListChildTiles: FPathfindingIndex</code></pre></div>\n<p>.. cpp:member:: bool bReverseEdgeLoop</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: BP_GridManager GridManagerRef</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Template, Disable Edit On Instance, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Set ReachableUnitIndexes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>","frontmatter":{"title":"BP_Path_SnakingHex","date":"September 28, 2024","description":" Variant pathfinding for hexagonal grids that prefers that units move in a snaking path between tiles over long curved lines, in cases where the move cost is equal. Might look better than standard pathfinding for huge open maps with long move ranges."}},"previous":{"fields":{"slug":"/BP_Path_Range/"},"frontmatter":{"title":"BP_Path_Range"}},"next":{"fields":{"slug":"/BP_Path_PassThroughFriendly/"},"frontmatter":{"title":"BP_Path_PassThroughFriendly"}}},"pageContext":{"id":"5f94713f-65fe-5e7b-a2fa-7d63cbcc8365","previousPostId":"0d5769f2-8963-5fc0-a3bb-b9d9124bbaab","nextPostId":"5d52f4f2-19ae-50c8-8137-22e819060ac8"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}