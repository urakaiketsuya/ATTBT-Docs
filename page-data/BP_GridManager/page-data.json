{"componentChunkName":"component---src-templates-blog-post-js","path":"/BP_GridManager/","result":{"data":{"site":{"siteMetadata":{"title":"Advanced Turn Based Tile Toolkit"}},"markdownRemark":{"id":"e66fde91-de2b-5df0-a075-48d941fbfe66","excerpt":"BP_GridManager Path: /Game/AdvancedTurnBasedTileToolkit/Core/Grid/BP_GridManager .. cpp:class:: BP_GridManager : public Actor Spawns the grid and all grid basedâ€¦","html":"<h1>BP_GridManager</h1>\n<p>Path: /Game/AdvancedTurnBasedTileToolkit/Core/Grid/BP_GridManager</p>\n<p>.. cpp:class:: BP_GridManager : public Actor</p>\n<p>Spawns the grid and all grid based arrays. Holds the location on the grid of all actors and the walkability between tiles. Runs pathfinding, visibility and all other grid-based code. Holds many such functions that are generally called by other blueprints. Also responsible for instantiating meshes.</p>\n<p>.. cpp:function:: void Construction_Script(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Construction script, the place to spawn components and do other setup. @note Name used in CreateBlueprint function\n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Event, Blueprint Callable, Blueprint Event\n\n  Construction script, the place to spawn components and do other setup. @note Name used in CreateBlueprint function\n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int, Vector, bool, exec, int, Vector, bool, exec, int, Vector, bool) GetHitTileLocationAndIndex(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets the tile index and location corresponding to the point under the cursor\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Gets the tile index and location corresponding to the point under the cursor\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns Index:  (Default: 0)\n  :rtype Index: int\n  :returns TileCenter:  (Default: 0, 0, 0)\n  :rtype TileCenter: Vector\n  :returns TraceHit:  (Default: true)\n  :rtype TraceHit: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns Index:  (Default: -1)\n  :rtype Index: int\n  :returns TileCenter:  (Default: 0, 0, 0)\n  :rtype TileCenter: Vector\n  :returns TraceHit:  (Default: false)\n  :rtype TraceHit: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns Index:  (Default: 0)\n  :rtype Index: int\n  :returns TileCenter:  (Default: 0, 0, 0)\n  :rtype TileCenter: Vector\n  :returns TraceHit:  (Default: false)\n  :rtype TraceHit: bool</code></pre></div>\n<p>.. cpp:function:: (exec, int, exec, int) GetIndexesInRange(exec then, int StartIndex, int Range, bool bDiamondShaped, bool bAllLevels, int MinRange)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets all grid indexes within a set range of a tile index\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Gets all grid indexes within a set range of a tile index\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg Range: \n  :type Range: int\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg bAllLevels: \n  :type bAllLevels: bool\n  :arg MinRange: \n  :type MinRange: int\n  :returns execute: \n  :rtype execute: exec\n  :returns InRangeTiles: \n  :rtype InRangeTiles: int\n  :returns execute: \n  :rtype execute: exec\n  :returns InRangeTiles: \n  :rtype InRangeTiles: int</code></pre></div>\n<p>.. cpp:function:: exec AddViewportUnitsToGridUnitsArray(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets all units in game and adds them to the Units map based on their index variable\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Gets all units in game and adds them to the Units map based on their index variable\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, exec, bool, int, exec, bool, int, exec, bool, int) FindReachableIndexClosestToTarget(exec then, int PathIndexesIn, BP_Path PathfindingType, int MoveRange, int DistanceToTarget, int PathsMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: From an array of grid indexes representing a path of tiles, finds the index closest to the target that has an appropriate move cost and is not blocked or occupied by units\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  From an array of grid indexes representing a path of tiles, finds the index closest to the target that has an appropriate move cost and is not blocked or occupied by units\n\n  :arg then: \n  :type then: exec\n  :arg PathIndexesIn: \n  :type PathIndexesIn: int\n  :arg PathfindingType: \n  :type PathfindingType: BP_Path\n  :arg MoveRange: \n  :type MoveRange: int\n  :arg DistanceToTarget: \n  :type DistanceToTarget: int\n  :arg PathsMap: \n  :type PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: false)\n  :rtype bPathFound: bool\n  :returns ClosestIndex:  (Default: 0)\n  :rtype ClosestIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: true)\n  :rtype bPathFound: bool\n  :returns ClosestIndex:  (Default: 0)\n  :rtype ClosestIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: false)\n  :rtype bPathFound: bool\n  :returns ClosestIndex:  (Default: 0)\n  :rtype ClosestIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: false)\n  :rtype bPathFound: bool\n  :returns ClosestIndex:  (Default: 0)\n  :rtype ClosestIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindTilesInRange(exec then, int StartIndex, int Range, bool bCheckVisibility, bool bDiamondShaped, double MaxZDifference=9999999, int MinimumRange=1, bool bAllLevels=1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all tiles within a set range of a grid index that meets the specified criteria\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all tiles within a set range of a grid index that meets the specified criteria\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg Range: \n  :type Range: int\n  :arg bCheckVisibility: \n  :type bCheckVisibility: bool\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg MaxZDifference:  (Default: 9999999)\n  :type MaxZDifference: double\n  :arg MinimumRange:  (Default: 1)\n  :type MinimumRange: int\n  :arg bAllLevels:  (Default: 1)\n  :type bAllLevels: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns InSightTiles: \n  :rtype InSightTiles: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindPathToIndex(exec then, int PathsMap, int EndIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Searches a paths map from an End Index contained in the map to the start index chosen when the pathfinding outputting this Paths map was run.\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Searches a paths map from an End Index contained in the map to the start index chosen when the pathfinding outputting this Paths map was run.\n\n  :arg then: \n  :type then: exec\n  :arg PathsMap: \n  :type PathsMap: int\n  :arg EndIndex: \n  :type EndIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns PathIndexes: \n  :rtype PathIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) ConvertIndexToLocation(exec then, int Index, double ZOffset)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds the location corresponding to a grid index (renamed from Index To Vector on Grid)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Finds the location corresponding to a grid index (renamed from Index To Vector on Grid)\n\n  :arg then: \n  :type then: exec\n  :arg Index: \n  :type Index: int\n  :arg ZOffset: \n  :type ZOffset: double\n  :returns execute: \n  :rtype execute: exec\n  :returns Vector:  (Default: 0, 0, 0)\n  :rtype Vector: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool) CheckIfImpassable(exec then, int Index)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Checks if grid index has any edges. If not, is assumed to be impassable. Note: Can potentially be moved into from other tiles, but cannot be moved out of.\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Checks if grid index has any edges. If not, is assumed to be impassable. Note: Can potentially be moved into from other tiles, but cannot be moved out of.\n\n  :arg then: \n  :type then: exec\n  :arg Index: \n  :type Index: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bReturnValue:  (Default: false)\n  :rtype bReturnValue: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bReturnValue:  (Default: true)\n  :rtype bReturnValue: bool</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, Vector, bool, exec, bool, int, Vector, bool) FindPathToTileInRange(exec then, int StartIndex, int TargetIndex, int MaxRange, bool bDiamondShaped, bool bTraceVisibility, EMovePriority Priority=NewEnumerator0, bool bRandomize, int PathsMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds the optimal path within a paths map that ends in a tile with range and in sight of the target, as specified by the priority input (closest tile to target, furthest away or tile that has the lowest move cost while still in sight and range)\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds the optimal path within a paths map that ends in a tile with range and in sight of the target, as specified by the priority input (closest tile to target, furthest away or tile that has the lowest move cost while still in sight and range)\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :arg MaxRange: \n  :type MaxRange: int\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg bTraceVisibility: \n  :type bTraceVisibility: bool\n  :arg Priority:  (Default: NewEnumerator0)\n  :type Priority: EMovePriority\n  :arg bRandomize: \n  :type bRandomize: bool\n  :arg PathsMap: \n  :type PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: true)\n  :rtype bPathFound: bool\n  :returns PathIndexes: \n  :rtype PathIndexes: int\n  :returns PathLocations: \n  :rtype PathLocations: Vector\n  :returns bNoMovePreferred:  (Default: false)\n  :rtype bNoMovePreferred: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: false)\n  :rtype bPathFound: bool\n  :returns PathIndexes: \n  :rtype PathIndexes: int\n  :returns PathLocations: \n  :rtype PathLocations: Vector\n  :returns bNoMovePreferred:  (Default: true)\n  :rtype bNoMovePreferred: bool</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindDistanceIinTilesBetweenIndexes(exec then, int Index1, int Index2, bool DiamondShaped)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds number of tiles separating two tile indexes. (renamed from Find Distance (in Tiles) Between Indexes)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Finds number of tiles separating two tile indexes. (renamed from Find Distance (in Tiles) Between Indexes)\n\n  :arg then: \n  :type then: exec\n  :arg Index1: \n  :type Index1: int\n  :arg Index2: \n  :type Index2: int\n  :arg DiamondShaped: \n  :type DiamondShaped: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns Distance:  (Default: 0)\n  :rtype Distance: int</code></pre></div>\n<p>.. cpp:function:: exec TeleportUnitOnGrid(exec then, int GridIndex, BP_Unit Unit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Moves a unit from one tile to another, updating the units array appropriately\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Moves a unit from one tile to another, updating the units array appropriately\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Unit: \n  :type Unit: BP_Unit\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec AddTileEdgesToGridEdgesArray(exec then, BP_Tile Tile)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds the edges of a tile to the edge array by adding them to the index of the tile as well as connection up neighboring tiles to this tile appropriately\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds the edges of a tile to the edge array by adding them to the index of the tile as well as connection up neighboring tiles to this tile appropriately\n\n  :arg then: \n  :type then: exec\n  :arg Tile: \n  :type Tile: BP_Tile\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec) RemoveTileEdge(exec then, int TileIndex, int Edge)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Removes the specified edge from the edges array\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Removes the specified edge from the edges array\n\n  :arg then: \n  :type then: exec\n  :arg TileIndex: \n  :type TileIndex: int\n  :arg Edge: \n  :type Edge: int\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec SetEdgeCost(exec then, int TileIndex, int Edge, int NewCost)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Sets the cost of an existing edge to a different cost as specified.\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Sets the cost of an existing edge to a different cost as specified.\n\n  :arg then: \n  :type then: exec\n  :arg TileIndex: \n  :type TileIndex: int\n  :arg Edge: \n  :type Edge: int\n  :arg NewCost: \n  :type NewCost: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec MakeTileImpassable(exec then, int Index)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Removes all edges of tile as well as all edges going to this tile from neighboring tiles\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Removes all edges of tile as well as all edges going to this tile from neighboring tiles\n\n  :arg then: \n  :type then: exec\n  :arg Index: \n  :type Index: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec RemoveTileEdgeBothWays(exec then, int Index1, int Index2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Removes the edges connecting two tiles in both directions, making it impossible to move directly between them.\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Removes the edges connecting two tiles in both directions, making it impossible to move directly between them.\n\n  :arg then: \n  :type then: exec\n  :arg Index1: \n  :type Index1: int\n  :arg Index2: \n  :type Index2: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec AddEdge(exec then, int TileIndex, int Edge, int Cost=1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds a single edge to an index of the edge array\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds a single edge to an index of the edge array\n\n  :arg then: \n  :type then: exec\n  :arg TileIndex: \n  :type TileIndex: int\n  :arg Edge: \n  :type Edge: int\n  :arg Cost:  (Default: 1)\n  :type Cost: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec AddEdgeBothWays(exec then, int TileIndex, int Edge, int Cost=1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds an edge from a tile to another, as well as from the target defined by the edge back to this tile\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Adds an edge from a tile to another, as well as from the target defined by the edge back to this tile\n\n  :arg then: \n  :type then: exec\n  :arg TileIndex: \n  :type TileIndex: int\n  :arg Edge: \n  :type Edge: int\n  :arg Cost:  (Default: 1)\n  :type Cost: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec MakeTilePassable(exec then, int Index, int Cost=1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds edges to all adjacent tiles on the same level that are not impassable. Generally do not use this function and use AddEdge instead. This function does not connect to tiles on other levels and can cause issues if the tile is on an edge.\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds edges to all adjacent tiles on the same level that are not impassable. Generally do not use this function and use AddEdge instead. This function does not connect to tiles on other levels and can cause issues if the tile is on an edge.\n\n  :arg then: \n  :type then: exec\n  :arg Index: \n  :type Index: int\n  :arg Cost:  (Default: 1)\n  :type Cost: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool) IsIndexOnOddRow(exec then, int _)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: For hex grids: Returns true if grid index is on an odd row of the grid\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  For hex grids: Returns true if grid index is on an odd row of the grid\n\n  :arg then: \n  :type then: exec\n  :arg _: \n  :type _: int\n  :returns execute: \n  :rtype execute: exec\n  :returns __:  (Default: false)\n  :rtype __: bool</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, double, double) SetCollisionPlaneAndHeightmapBoxScaleAndLocation(exec then, bool bOverrideSize, int SizeXOverride, int SizeYOverride)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Scales the collision box and heightmap box to cover the entire grid\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Scales the collision box and heightmap box to cover the entire grid\n\n  :arg then: \n  :type then: exec\n  :arg bOverrideSize: \n  :type bOverrideSize: bool\n  :arg SizeXOverride: \n  :type SizeXOverride: int\n  :arg SizeYOverride: \n  :type SizeYOverride: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Location:  (Default: 0, 0, 0)\n  :rtype Location: Vector\n  :returns ScaleX:  (Default: 0.0)\n  :rtype ScaleX: double\n  :returns ScaleY:  (Default: 0.0)\n  :rtype ScaleY: double</code></pre></div>\n<p>.. cpp:function:: exec DisplayTileIndexes(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Pregenerate gameplay grids must be enabled for this function to function. Displays the grid indexes of all tiles.\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Pregenerate gameplay grids must be enabled for this function to function. Displays the grid indexes of all tiles.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec DisplayTileEdges(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Pregenerate gameplay grids must be enabled for this function to function. Displays the edges and edge costs of all tiles.\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Pregenerate gameplay grids must be enabled for this function to function. Displays the edges and edge costs of all tiles.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int) FindUnitsInRange(exec then, int StartIndex, int Range, bool bDiamondShapedVisibility, int SizeAdjustment, int MinRange, bool bAllLevels=true)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all units within a number of tiles from the specified start index as specified by the inputted range\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all units within a number of tiles from the specified start index as specified by the inputted range\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg Range: \n  :type Range: int\n  :arg bDiamondShapedVisibility: \n  :type bDiamondShapedVisibility: bool\n  :arg SizeAdjustment: \n  :type SizeAdjustment: int\n  :arg MinRange: \n  :type MinRange: int\n  :arg bAllLevels:  (Default: true)\n  :type bAllLevels: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bFoundValidTargets:  (Default: false)\n  :rtype bFoundValidTargets: bool\n  :returns InSightUnits: \n  :rtype InSightUnits: int</code></pre></div>\n<p>.. cpp:function:: (exec, int, exec, int) FindVisibleUnitsInRange(exec then, int StartIndex, int Range, bool bDiamondShaped, bool bAutoHeightLimit=true, int MinRange, int SizeAdjustment)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all visible units within a number of tiles from the specified start index as specified by the inputted range. Excludes units with a z height difference higher or lower than the one specified compared to the location of the start index.\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all visible units within a number of tiles from the specified start index as specified by the inputted range. Excludes units with a z height difference higher or lower than the one specified compared to the location of the start index.\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg Range: \n  :type Range: int\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg bAutoHeightLimit:  (Default: true)\n  :type bAutoHeightLimit: bool\n  :arg MinRange: \n  :type MinRange: int\n  :arg SizeAdjustment: \n  :type SizeAdjustment: int\n  :returns execute: \n  :rtype execute: exec\n  :returns InSightUnits: \n  :rtype InSightUnits: int\n  :returns execute: \n  :rtype execute: exec\n  :returns InSightUnits: \n  :rtype InSightUnits: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindTilesInMoveRangeWithSightToTarget(exec then, int StartIndex, int TargetIndex, int MaxRange, bool bDiamondShaped, bool bTraceVisibility, int PathsMap, int InRangeTiles)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes an array of grid indexes from GetIndexesInRange and returns which of these can be seen from any tile in the inputted paths map\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Takes an array of grid indexes from GetIndexesInRange and returns which of these can be seen from any tile in the inputted paths map\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :arg MaxRange: \n  :type MaxRange: int\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg bTraceVisibility: \n  :type bTraceVisibility: bool\n  :arg PathsMap: \n  :type PathsMap: int\n  :arg InRangeTiles: \n  :type InRangeTiles: int\n  :returns execute: \n  :rtype execute: exec\n  :returns LOSIndexesOut: \n  :rtype LOSIndexesOut: int</code></pre></div>\n<p>.. cpp:function:: (exec, FRange, exec, FRange, exec, FRange, exec, FRange) FindOptimalTileInMoveRangeWithSightToTarget(exec then, int TargetIndex, bool bDiamondShaped, EMovePriority Priority=NewEnumerator0, int LOSIndexes, int PathsMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Checks and returns what inputted tiles best qualify the specified criteria (proximity to target, distance from target or lowest move cost)\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Checks and returns what inputted tiles best qualify the specified criteria (proximity to target, distance from target or lowest move cost)\n\n  :arg then: \n  :type then: exec\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg Priority:  (Default: NewEnumerator0)\n  :type Priority: EMovePriority\n  :arg LOSIndexes: \n  :type LOSIndexes: int\n  :arg PathsMap: \n  :type PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns MoveChoiceCandidates: \n  :rtype MoveChoiceCandidates: FRange\n  :returns execute: \n  :rtype execute: exec\n  :returns MoveChoiceCandidates: \n  :rtype MoveChoiceCandidates: FRange\n  :returns execute: \n  :rtype execute: exec\n  :returns MoveChoiceCandidates: \n  :rtype MoveChoiceCandidates: FRange\n  :returns execute: \n  :rtype execute: exec\n  :returns MoveChoiceCandidates: \n  :rtype MoveChoiceCandidates: FRange</code></pre></div>\n<p>.. cpp:function:: (exec, int, int, exec, int, int) DecideFinalTargetFromViableOptions(exec then, int TargetUnitIndex, bool Randomize, FRange MoveChoiceCandidates, int PathsMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Decide the final target from viable options and find the path to this tile\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Decide the final target from viable options and find the path to this tile\n\n  :arg then: \n  :type then: exec\n  :arg TargetUnitIndex: \n  :type TargetUnitIndex: int\n  :arg Randomize: \n  :type Randomize: bool\n  :arg MoveChoiceCandidates: \n  :type MoveChoiceCandidates: FRange\n  :arg PathsMap: \n  :type PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns TargetIndex:  (Default: 0)\n  :rtype TargetIndex: int\n  :returns TargetValue:  (Default: 0)\n  :rtype TargetValue: int\n  :returns execute: \n  :rtype execute: exec\n  :returns TargetIndex:  (Default: 0)\n  :rtype TargetIndex: int\n  :returns TargetValue:  (Default: 0)\n  :rtype TargetValue: int</code></pre></div>\n<p>.. cpp:function:: exec SpawnDebugMarker(exec then, Vector Location, Rotator Rotation, int Index, bool UseIndex=1)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Spawns an arrow mesh at index or location. Useful for debugging when checking the indexes contained in an array.\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Spawns an arrow mesh at index or location. Useful for debugging when checking the indexes contained in an array.\n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :arg Rotation: \n  :type Rotation: Rotator\n  :arg Index: \n  :type Index: int\n  :arg UseIndex:  (Default: 1)\n  :type UseIndex: bool\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int) KeepIndexesWithRelevantUnitsSet(exec then, int InIndexes, EFaction RelevantFactions=NewEnumerator3, bool bFindFactionsNotInSet, bool bExcludeSpecifiedUnit=1, BP_Unit SpecifiedUnit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: From an array of unit indexes, keeps the ones that meet specified criteria.\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  From an array of unit indexes, keeps the ones that meet specified criteria.\n\n  :arg then: \n  :type then: exec\n  :arg InIndexes: \n  :type InIndexes: int\n  :arg RelevantFactions:  (Default: NewEnumerator3)\n  :type RelevantFactions: EFaction\n  :arg bFindFactionsNotInSet: \n  :type bFindFactionsNotInSet: bool\n  :arg bExcludeSpecifiedUnit:  (Default: 1)\n  :type bExcludeSpecifiedUnit: bool\n  :arg SpecifiedUnit: \n  :type SpecifiedUnit: BP_Unit\n  :returns execute: \n  :rtype execute: exec\n  :returns bFoundValidTargets:  (Default: false)\n  :rtype bFoundValidTargets: bool\n  :returns OutIndexes: \n  :rtype OutIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) KeepTargetsInSightFromMoveArray(exec then, int TargetIndexes, int Range, int MinRange, bool DiamondShapedVisibility, bool bAvoidTileOccupiedByCurrentUnit=false, int PathsMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all units that are visible from any tile index currently in the Can Move To Array\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all units that are visible from any tile index currently in the Can Move To Array\n\n  :arg then: \n  :type then: exec\n  :arg TargetIndexes: \n  :type TargetIndexes: int\n  :arg Range: \n  :type Range: int\n  :arg MinRange: \n  :type MinRange: int\n  :arg DiamondShapedVisibility: \n  :type DiamondShapedVisibility: bool\n  :arg bAvoidTileOccupiedByCurrentUnit:  (Default: false)\n  :type bAvoidTileOccupiedByCurrentUnit: bool\n  :arg PathsMap: \n  :type PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns KeptTargets: \n  :rtype KeptTargets: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool, exec, bool, exec, bool, exec, bool) CheckIfTileIsVisibleFromOtherTile(exec then, int Start_Index, int TargetIndex, double MaxZDifference=-1.000000, bool bCheckVisibility)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Checks if tile can be seen from another, using line trace if specified\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Checks if tile can be seen from another, using line trace if specified\n\n  :arg then: \n  :type then: exec\n  :arg Start_Index: \n  :type Start_Index: int\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :arg MaxZDifference:  (Default: -1.000000)\n  :type MaxZDifference: double\n  :arg bCheckVisibility: \n  :type bCheckVisibility: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: true)\n  :rtype bVisible: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: false)\n  :rtype bVisible: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: false)\n  :rtype bVisible: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: false)\n  :rtype bVisible: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: false)\n  :rtype bVisible: bool</code></pre></div>\n<p>.. cpp:function:: exec AddAllTileActorEdges(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type:  Gets the edge costs of all tile actors and add them to the edge array.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n   Gets the edge costs of all tile actors and add them to the edge array.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec) RemoveUnreachableTiles(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: If the ReachableTileMarkers array is not empty, runs pathfinding from each of these markers, making any tiles that are not found impassable. Used mostly for looks, so that the hover marker does not appear over tiles the player could never reach.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  If the ReachableTileMarkers array is not empty, runs pathfinding from each of these markers, making any tiles that are not found impassable. Used mostly for looks, so that the hover marker does not appear over tiles the player could never reach.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec SetupScaleAndDefaultTiles(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Setup the default mesh and tile size\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Setup the default mesh and tile size\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec SetupCollisionPlane(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Scale and position the collision plane. This makes individual collision volumes unecessary for flat grids, and makes it possible to place meshes in the viewport if the default tile is invisible\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Scale and position the collision plane. This makes individual collision volumes unecessary for flat grids, and makes it possible to place meshes in the viewport if the default tile is invisible\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec SetupHeightmapBox(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Scale and Position HeightmapBox. Is used to show the the maximum and minimum Z locations on which heightmap tracing is used\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Scale and Position HeightmapBox. Is used to show the the maximum and minimum Z locations on which heightmap tracing is used\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool, exec, bool, exec, bool) CreateGridLocations(exec then, int StartIndex, int NumTilesX, int NumTilesY, EHeight HeightmapType=NewEnumerator0)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Create the vector grids that form the basis of moving between grid array indexes and world locations\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Create the vector grids that form the basis of moving between grid array indexes and world locations\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg NumTilesX: \n  :type NumTilesX: int\n  :arg NumTilesY: \n  :type NumTilesY: int\n  :arg HeightmapType:  (Default: NewEnumerator0)\n  :type HeightmapType: EHeight\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: exec PreventIncompatibleVariableCombinations(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Prevent the user from choosing incompatible combinations of public variables\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Prevent the user from choosing incompatible combinations of public variables\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) ConvertFromGridToWorld(exec then, Vector _)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets a grid location and converts it into an actual world location, taking the Grid Managers transform into account\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Gets a grid location and converts it into an actual world location, taking the Grid Managers transform into account\n\n  :arg then: \n  :type then: exec\n  :arg _: \n  :type _: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns __:  (Default: 0, 0, 0)\n  :rtype __: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) ConvertFromWorldToGrid(exec then, Vector _)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes an in-game location and converts it into a grid location (a relative location to grid index 0)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Takes an in-game location and converts it into a grid location (a relative location to grid index 0)\n\n  :arg then: \n  :type then: exec\n  :arg _: \n  :type _: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns __:  (Default: 0, 0, 0)\n  :rtype __: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, bool) TraceOnGrid(exec then, int StartIndex, int TargetIndex, ETraceTypeQuery TraceChannel=TraceTypeQuery1, EDrawDebugTrace DrawDebugType=None, double TraceHeight)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: fires a line trace between two tiles, noting if it is a hit\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  fires a line trace between two tiles, noting if it is a hit\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :arg TraceChannel:  (Default: TraceTypeQuery1)\n  :type TraceChannel: ETraceTypeQuery\n  :arg DrawDebugType:  (Default: None)\n  :type DrawDebugType: EDrawDebugTrace\n  :arg TraceHeight: \n  :type TraceHeight: double\n  :returns execute: \n  :rtype execute: exec\n  :returns Hit:  (Default: false)\n  :rtype Hit: bool</code></pre></div>\n<p>.. cpp:function:: (exec, bool) CheckIfStraightAdjacent(exec then, int Index1, int Index2)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Checks if two adjacent tiles are not diagonally adjacent\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Checks if two adjacent tiles are not diagonally adjacent\n\n  :arg then: \n  :type then: exec\n  :arg Index1: \n  :type Index1: int\n  :arg Index2: \n  :type Index2: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bStraight:  (Default: false)\n  :rtype bStraight: bool</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) ConvertGridIndexesToLocations(exec then, int Indexes, Vector Offset)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Converts an array of grid indexes into locations offset by TileInRangeOffset\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Converts an array of grid indexes into locations offset by TileInRangeOffset\n\n  :arg then: \n  :type then: exec\n  :arg Indexes: \n  :type Indexes: int\n  :arg Offset: \n  :type Offset: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns Locations: \n  :rtype Locations: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, bool, int, int, exec, bool, int, bool, int, int, exec, bool, int, bool, int, int, exec, bool, int, bool, int, int, exec, bool, int, bool, int, int) FindClosestUnitInMoveRange(exec then, int StartIndex, int SearchLimit, BP_Path PathfindingType, EFaction RelevantFactions=NewEnumerator3, bool bFindFactionsNotInSet=true, bool bSearchBehindFriendlyOnFail=true)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Runs pathfinding until a unit with one of the specified factions is found. If none are found and factions not in the searched for targets are found and could potentially block the way, continues search behind these units to find the closest unit being blocked by other units\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Runs pathfinding until a unit with one of the specified factions is found. If none are found and factions not in the searched for targets are found and could potentially block the way, continues search behind these units to find the closest unit being blocked by other units\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg SearchLimit: \n  :type SearchLimit: int\n  :arg PathfindingType: \n  :type PathfindingType: BP_Path\n  :arg RelevantFactions:  (Default: NewEnumerator3)\n  :type RelevantFactions: EFaction\n  :arg bFindFactionsNotInSet:  (Default: true)\n  :type bFindFactionsNotInSet: bool\n  :arg bSearchBehindFriendlyOnFail:  (Default: true)\n  :type bSearchBehindFriendlyOnFail: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bTargetFound:  (Default: true)\n  :rtype bTargetFound: bool\n  :returns ClosestUnitIndex:  (Default: 0)\n  :rtype ClosestUnitIndex: int\n  :returns bTargetBehindFriendlyUnit:  (Default: false)\n  :rtype bTargetBehindFriendlyUnit: bool\n  :returns DistanceToClosestTarget:  (Default: 0)\n  :rtype DistanceToClosestTarget: int\n  :returns PathsMap: \n  :rtype PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bTargetFound:  (Default: false)\n  :rtype bTargetFound: bool\n  :returns ClosestUnitIndex:  (Default: 0)\n  :rtype ClosestUnitIndex: int\n  :returns bTargetBehindFriendlyUnit:  (Default: false)\n  :rtype bTargetBehindFriendlyUnit: bool\n  :returns DistanceToClosestTarget:  (Default: -1)\n  :rtype DistanceToClosestTarget: int\n  :returns PathsMap: \n  :rtype PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bTargetFound:  (Default: false)\n  :rtype bTargetFound: bool\n  :returns ClosestUnitIndex:  (Default: 0)\n  :rtype ClosestUnitIndex: int\n  :returns bTargetBehindFriendlyUnit:  (Default: false)\n  :rtype bTargetBehindFriendlyUnit: bool\n  :returns DistanceToClosestTarget:  (Default: 0)\n  :rtype DistanceToClosestTarget: int\n  :returns PathsMap: \n  :rtype PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bTargetFound:  (Default: false)\n  :rtype bTargetFound: bool\n  :returns ClosestUnitIndex:  (Default: 0)\n  :rtype ClosestUnitIndex: int\n  :returns bTargetBehindFriendlyUnit:  (Default: false)\n  :rtype bTargetBehindFriendlyUnit: bool\n  :returns DistanceToClosestTarget:  (Default: -1)\n  :rtype DistanceToClosestTarget: int\n  :returns PathsMap: \n  :rtype PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bTargetFound:  (Default: false)\n  :rtype bTargetFound: bool\n  :returns ClosestUnitIndex:  (Default: 0)\n  :rtype ClosestUnitIndex: int\n  :returns bTargetBehindFriendlyUnit:  (Default: false)\n  :rtype bTargetBehindFriendlyUnit: bool\n  :returns DistanceToClosestTarget:  (Default: -1)\n  :rtype DistanceToClosestTarget: int\n  :returns PathsMap: \n  :rtype PathsMap: int</code></pre></div>\n<p>.. cpp:function:: (exec, int, BP_Path) RunPathfinding(exec then, int StartIndex, int MoveRange, BP_Path Type)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Searches outwards from specified indexes to the specified move range using the grid edges. Returns all tiles reachable given these parameters and any units found in the search.\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Searches outwards from specified indexes to the specified move range using the grid edges. Returns all tiles reachable given these parameters and any units found in the search.\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg MoveRange: \n  :type MoveRange: int\n  :arg Type: \n  :type Type: BP_Path\n  :returns execute: \n  :rtype execute: exec\n  :returns PathsMap: \n  :rtype PathsMap: int\n  :returns PathObject: \n  :rtype PathObject: BP_Path</code></pre></div>\n<p>.. cpp:function:: exec GenerateGridEdges(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Generates all grid edges, determining what tiles can be moved between and the movement cost for each edge.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Generates all grid edges, determining what tiles can be moved between and the movement cost for each edge.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec SetupGridCollision(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Individual collision for each tile is disabled</code></pre></div>\n<p>at runtime for performance reasons. the collision\rplane does the same thing cheaper.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Individual collision for each tile is disabled</code></pre></div>\n<p>at runtime for performance reasons. the collision\rplane does the same thing cheaper.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool) SpawnTileGrid(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Spawns Tile Instnced meshes in a grid pattern based on grid size and type\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Spawns Tile Instnced meshes in a grid pattern based on grid size and type\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: (exec, exec) DebugPregenerateGameplayGrids(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Generates grids for locations, edges etc. in construction script if PregenerateGameplayGrids is true. Should only be used for debugging, and not in a packaged game. Displays tile edges and indexes if specified. If changes are made to the grid by placing new tiles/terrain etc. this function should be re-run for the edge array to update appropriately. \n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Generates grids for locations, edges etc. in construction script if PregenerateGameplayGrids is true. Should only be used for debugging, and not in a packaged game. Displays tile edges and indexes if specified. If changes are made to the grid by placing new tiles/terrain etc. this function should be re-run for the edge array to update appropriately. \n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, int, BP_Path) RunPathfindingUntilIndexFound(exec then, int StartIndex, int MoveRange, BP_Path Type, int TargetGridIndexes)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Runs a stepwise pathfinding that ends if any of the specified grid indexes are found\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Runs a stepwise pathfinding that ends if any of the specified grid indexes are found\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg MoveRange: \n  :type MoveRange: int\n  :arg Type: \n  :type Type: BP_Path\n  :arg TargetGridIndexes: \n  :type TargetGridIndexes: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bFoundAtLeastOne:  (Default: false)\n  :rtype bFoundAtLeastOne: bool\n  :returns FoundGridIndexes: \n  :rtype FoundGridIndexes: int\n  :returns PathsMap: \n  :rtype PathsMap: int\n  :returns PathObject: \n  :rtype PathObject: BP_Path</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int) FindGridIndexesInGridMap(exec then, int GridIndexes, int GridMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Return all inputted grid indexes that are contained in the inputted grid map\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Return all inputted grid indexes that are contained in the inputted grid map\n\n  :arg then: \n  :type then: exec\n  :arg GridIndexes: \n  :type GridIndexes: int\n  :arg GridMap: \n  :type GridMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bFoundAtLeastOne:  (Default: false)\n  :rtype bFoundAtLeastOne: bool\n  :returns FoundGridIndexes: \n  :rtype FoundGridIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int) KeepIndexesWithRelevantUnitsArray(exec then, int InIndexes, EFaction RelevantFactions=NewEnumerator3, bool bFindFactionsNotInSet, bool bExcludeSpecifiedUnit=1, BP_Unit SpecifiedUnit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: From an array of unit indexes, keeps the ones that meet specified criteria.\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  From an array of unit indexes, keeps the ones that meet specified criteria.\n\n  :arg then: \n  :type then: exec\n  :arg InIndexes: \n  :type InIndexes: int\n  :arg RelevantFactions:  (Default: NewEnumerator3)\n  :type RelevantFactions: EFaction\n  :arg bFindFactionsNotInSet: \n  :type bFindFactionsNotInSet: bool\n  :arg bExcludeSpecifiedUnit:  (Default: 1)\n  :type bExcludeSpecifiedUnit: bool\n  :arg SpecifiedUnit: \n  :type SpecifiedUnit: BP_Unit\n  :returns execute: \n  :rtype execute: exec\n  :returns bFoundValidTargets:  (Default: false)\n  :rtype bFoundValidTargets: bool\n  :returns OutIndexes: \n  :rtype OutIndexes: int</code></pre></div>\n<p>.. cpp:function:: void CreateLocationsAndHeightmap(exec then, int GridIndex, Vector Location)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: At startup, generates a map of all grid tile locations. Heightmap = false: flat grid, heightmap = One Level: Uses line traces to find highest points within defined boundries that blocks PathTrace. Heightmap = multilevel: Keeps tracing after first hit, adding more levels to the locations map when found until outside MinGridHeight\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  At startup, generates a map of all grid tile locations. Heightmap = false: flat grid, heightmap = One Level: Uses line traces to find highest points within defined boundries that blocks PathTrace. Heightmap = multilevel: Keeps tracing after first hit, adding more levels to the locations map when found until outside MinGridHeight\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Location: \n  :type Location: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, exec, exec) SetEdgesBasedOnTerrain(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Pregenerate Gameplay Grids: Generates some of the grids used for gameplay in the construction scripts o they won't have to load on Event Begin Play. Speeds up startup, but slows down the construction script. Activate before packaging.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Pregenerate Gameplay Grids: Generates some of the grids used for gameplay in the construction scripts o they won't have to load on Event Begin Play. Speeds up startup, but slows down the construction script. Activate before packaging.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool) MakeBigUnitArray(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Experimental work-in-progress. Uses predefined search patterns to find the max size of unit that can occupy each tile. Does currently not support hexagonal or multi-level grids.\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Experimental work-in-progress. Uses predefined search patterns to find the max size of unit that can occupy each tile. Does currently not support hexagonal or multi-level grids.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool, exec, bool) BigSearchStep(exec then, FIndexEdge SearchSteps, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Part of MakeBigUnitArray function that checks the max unit size that can occupy one particular grid index\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Part of MakeBigUnitArray function that checks the max unit size that can occupy one particular grid index\n\n  :arg then: \n  :type then: exec\n  :arg SearchSteps: \n  :type SearchSteps: FIndexEdge\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Success:  (Default: true)\n  :rtype Success: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns Success:  (Default: false)\n  :rtype Success: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns Success:  (Default: false)\n  :rtype Success: bool</code></pre></div>\n<p>.. cpp:function:: (exec, exec) MakeSimpleCostsMap(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: If bUseSimpleCosts is true, adds the simple costs of all tiles to the GridSimpleCosts map. By default this map is checked by any units with a pathfinding type with \"simple\" in its name\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  If bUseSimpleCosts is true, adds the simple costs of all tiles to the GridSimpleCosts map. By default this map is checked by any units with a pathfinding type with \"simple\" in its name\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec AddUnitToGrid(exec then, BP_Unit Unit, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Inserts a unit into the GridUnits map at the specified grid index. If unit is big, also adds it to surrounding tiles as appropriate.\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Inserts a unit into the GridUnits map at the specified grid index. If unit is big, also adds it to surrounding tiles as appropriate.\n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec RemoveUnitFromGrid(exec then, BP_Unit Unit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Removes references to this unit in the GridUnits map\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Removes references to this unit in the GridUnits map\n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindBigIndexesFromIndexes(exec then, int GridIndexes, int Size)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all indexes that will be occupied by a big unit of the input Size on the input GridIndexes\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all indexes that will be occupied by a big unit of the input Size on the input GridIndexes\n\n  :arg then: \n  :type then: exec\n  :arg GridIndexes: \n  :type GridIndexes: int\n  :arg Size: \n  :type Size: int\n  :returns execute: \n  :rtype execute: exec\n  :returns BigGridIndexes: \n  :rtype BigGridIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindGridIndexesForBigUnitModification(exec then, int GridIndex, int Size)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds what grid indexes to modify for a unit of the input size on the input GridIndex\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds what grid indexes to modify for a unit of the input size on the input GridIndex\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Size: \n  :type Size: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridIndexes: \n  :rtype GridIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, exec) ModifyBigUnitArrayByUnit(exec then, BP_Unit Unit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Modifies the big unit array based on the input unit's grid index and size\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Modifies the big unit array based on the input unit's grid index and size\n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec ModifyBigUnitArray(exec then, int GridIndex, int Size)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Modifies the big unit array based on a Grid Index and size\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Modifies the big unit array based on a Grid Index and size\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Size: \n  :type Size: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec RemoveUnitFromBigUnitArray(exec then, BP_Unit Unit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all tiles currently occupied by a big unit and removes references of it from these tiles\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all tiles currently occupied by a big unit and removes references of it from these tiles\n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, int) FindReachableIndexClosestToTargetThorough(exec then, int StartIndex, int TargetIndex, int DistanceToTarget, int MoveRange, BP_Path Type)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Used specifically for AI units that can pass through other units to make sure they take the optimal path in cases where the last two indexes of their original calculated path overlaps with another unit\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Used specifically for AI units that can pass through other units to make sure they take the optimal path in cases where the last two indexes of their original calculated path overlaps with another unit\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :arg DistanceToTarget: \n  :type DistanceToTarget: int\n  :arg MoveRange: \n  :type MoveRange: int\n  :arg Type: \n  :type Type: BP_Path\n  :returns execute: \n  :rtype execute: exec\n  :returns bPathFound:  (Default: false)\n  :rtype bPathFound: bool\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int\n  :returns Cost:  (Default: 0)\n  :rtype Cost: int</code></pre></div>\n<p>.. cpp:function:: (exec, exec) AddObjectToGrid(exec then, Object Object, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds an object to a tile in the object map. Can be used to add custom functionality to tiles.\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds an object to a tile in the object map. Can be used to add custom functionality to tiles.\n\n  :arg then: \n  :type then: exec\n  :arg Object: \n  :type Object: Object\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec) RemoveObjectFromGrid(exec then, Object Object, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Removes the specified object from the GridObjects map at the specified grid index\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Removes the specified object from the GridObjects map at the specified grid index\n\n  :arg then: \n  :type then: exec\n  :arg Object: \n  :type Object: Object\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec, exec) InteractWithObjects(exec then, int GridIndex, Actor TriggeringActor, Object SpecificClass, bool bRepeatIfMany, GameplayTagContainer InteractionType)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Triggers interact interface events for objects stored in the GridObjects map at the specified grid index. If a specific class is not specified, all objects are interacted with.\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Triggers interact interface events for objects stored in the GridObjects map at the specified grid index. If a specific class is not specified, all objects are interacted with.\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg TriggeringActor: \n  :type TriggeringActor: Actor\n  :arg SpecificClass: \n  :type SpecificClass: Object\n  :arg bRepeatIfMany: \n  :type bRepeatIfMany: bool\n  :arg InteractionType: \n  :type InteractionType: GameplayTagContainer\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetPathfindingEdge(exec then, int PathsMap, FPathfindingIndex OpenListTiles, FPathfindingIndex ContinuePathTiles, int ReachableUnits)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all grid indexes that are at the edge of an output map of grid indexes from the RunPathfinding function\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all grid indexes that are at the edge of an output map of grid indexes from the RunPathfinding function\n\n  :arg then: \n  :type then: exec\n  :arg PathsMap: \n  :type PathsMap: int\n  :arg OpenListTiles: \n  :type OpenListTiles: FPathfindingIndex\n  :arg ContinuePathTiles: \n  :type ContinuePathTiles: FPathfindingIndex\n  :arg ReachableUnits: \n  :type ReachableUnits: int\n  :returns execute: \n  :rtype execute: exec\n  :returns EdgeGridIndexes: \n  :rtype EdgeGridIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, int, Vector, SplineComponent, exec, int, Vector, SplineComponent) FindSplinePathToGridIndex(exec then, int PathsMap, int IndexPathEnd, Vector Offset, SplineComponent SplineIn, ESplinePointType SplineType=Linear)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds the path from the specified end index to the start index of the pathfinding generating the inputted Paths map. Can display this path as a spline with spline meshes or multiple ISMs\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds the path from the specified end index to the start index of the pathfinding generating the inputted Paths map. Can display this path as a spline with spline meshes or multiple ISMs\n\n  :arg then: \n  :type then: exec\n  :arg PathsMap: \n  :type PathsMap: int\n  :arg IndexPathEnd: \n  :type IndexPathEnd: int\n  :arg Offset: \n  :type Offset: Vector\n  :arg SplineIn: \n  :type SplineIn: SplineComponent\n  :arg SplineType:  (Default: Linear)\n  :type SplineType: ESplinePointType\n  :returns execute: \n  :rtype execute: exec\n  :returns PathIndexes: \n  :rtype PathIndexes: int\n  :returns PathLocations: \n  :rtype PathLocations: Vector\n  :returns SplineOut: \n  :rtype SplineOut: SplineComponent\n  :returns execute: \n  :rtype execute: exec\n  :returns PathIndexes: \n  :rtype PathIndexes: int\n  :returns PathLocations: \n  :rtype PathLocations: Vector\n  :returns SplineOut: \n  :rtype SplineOut: SplineComponent</code></pre></div>\n<p>.. cpp:function:: (exec, int) KeepOnlyCenterBigUnitTileOfTargets(exec then, int TargetGridIndexes)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: For a set of target indexes representing units, removes all that are duplicates of the same unit (for big units occupying multiple tiles), leaving only the center tile. Primarily an optimization measure so that the AI does not have to consider multiple different tiles when deciding whether to target this unit.\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  For a set of target indexes representing units, removes all that are duplicates of the same unit (for big units occupying multiple tiles), leaving only the center tile. Primarily an optimization measure so that the AI does not have to consider multiple different tiles when deciding whether to target this unit.\n\n  :arg then: \n  :type then: exec\n  :arg TargetGridIndexes: \n  :type TargetGridIndexes: int\n  :returns execute: \n  :rtype execute: exec\n  :returns KeptGridIndexes: \n  :rtype KeptGridIndexes: int</code></pre></div>\n<p>.. cpp:function:: exec MakeBigUnitsMapFromPrecalculations(exec then, int GridIndex, FBigSearch SearchPatterns, FBigCarryOver TileSizeModCalculations)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: From precalculated arrays generated in MakeBigUnitArray, loops through the grid and finds out the biggest unit that can occupy each tile, storing this in GridBigIndexes\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  From precalculated arrays generated in MakeBigUnitArray, loops through the grid and finds out the biggest unit that can occupy each tile, storing this in GridBigIndexes\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg SearchPatterns: \n  :type SearchPatterns: FBigSearch\n  :arg TileSizeModCalculations: \n  :type TileSizeModCalculations: FBigCarryOver\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, exec, bool, int, exec, bool, int) CheckIfEdgeArrayContainsMultilevelEdge(exec then, int Edge, int Edges)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Checks if an array of edges contains a particular edge, counting edges on different levels as if they were on the same level\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Checks if an array of edges contains a particular edge, counting edges on different levels as if they were on the same level\n\n  :arg then: \n  :type then: exec\n  :arg Edge: \n  :type Edge: int\n  :arg Edges: \n  :type Edges: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bContains:  (Default: true)\n  :rtype bContains: bool\n  :returns EdgeIndex:  (Default: 0)\n  :rtype EdgeIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bContains:  (Default: false)\n  :rtype bContains: bool\n  :returns EdgeIndex:  (Default: -1)\n  :rtype EdgeIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bContains:  (Default: true)\n  :rtype bContains: bool\n  :returns EdgeIndex:  (Default: 0)\n  :rtype EdgeIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) ConvertGridCoordsToGridIndex(exec then, IntVector GridCoords, int GridCoords_X, int GridCoords_Y, int GridCoords_Z)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes three grid coordinateds and converts into a GridIndex\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Takes three grid coordinateds and converts into a GridIndex\n\n  :arg then: \n  :type then: exec\n  :arg GridCoords: \n  :type GridCoords: IntVector\n  :arg GridCoords_X: \n  :type GridCoords_X: int\n  :arg GridCoords_Y: \n  :type GridCoords_Y: int\n  :arg GridCoords_Z: \n  :type GridCoords_Z: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) ConvertGridCoordsToGridIndexPure(exec then, IntVector GridCoords, int GridCoords_X, int GridCoords_Y, int GridCoords_Z)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes three grid coordinateds and converts into a GridIndex\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Takes three grid coordinateds and converts into a GridIndex\n\n  :arg then: \n  :type then: exec\n  :arg GridCoords: \n  :type GridCoords: IntVector\n  :arg GridCoords_X: \n  :type GridCoords_X: int\n  :arg GridCoords_Y: \n  :type GridCoords_Y: int\n  :arg GridCoords_Z: \n  :type GridCoords_Z: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, IntVector, int, int, int) ConvertGridIndexToGridCoords(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes a grid index and converts into grid coordinates\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Takes a grid index and converts into grid coordinates\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridCoords: \n  :rtype GridCoords: IntVector\n  :returns GridCoords_X:  (Default: 0)\n  :rtype GridCoords_X: int\n  :returns GridCoords_Y:  (Default: 0)\n  :rtype GridCoords_Y: int\n  :returns GridCoords_Z:  (Default: 0)\n  :rtype GridCoords_Z: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetGridIndexXPure(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes a grid index (containing XYZ) and returns the X index\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Takes a grid index (containing XYZ) and returns the X index\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns X:  (Default: 0)\n  :rtype X: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetGridIndexYPure(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes a grid index (containing XYZ) and returns the Y index\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Takes a grid index (containing XYZ) and returns the Y index\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Y:  (Default: 0)\n  :rtype Y: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetGridIndexZPure(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes a grid index (containing XYZ) and returns the Z index\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Takes a grid index (containing XYZ) and returns the Z index\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Z:  (Default: 0)\n  :rtype Z: int</code></pre></div>\n<p>.. cpp:function:: (exec, int, exec, int, exec, int) GetEdgeCostFromZDifference(exec then, double ParentZ, double ChildZ)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Compares height difference of two tiles. Returns the appropriate edge cost between them based on the values specified. If the difference is larger than the Height Impassable Cutoff, returns 0 (indicating that the edge should be removed). If the difference is lower than Height Impassable Cutoff, but higher than Height Slow Increment, returns a value corresponding to the height difference divided by the height slow increment.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Compares height difference of two tiles. Returns the appropriate edge cost between them based on the values specified. If the difference is larger than the Height Impassable Cutoff, returns 0 (indicating that the edge should be removed). If the difference is lower than Height Impassable Cutoff, but higher than Height Slow Increment, returns a value corresponding to the height difference divided by the height slow increment.\n\n  :arg then: \n  :type then: exec\n  :arg ParentZ: \n  :type ParentZ: double\n  :arg ChildZ: \n  :type ChildZ: double\n  :returns execute: \n  :rtype execute: exec\n  :returns Cost:  (Default: 1)\n  :rtype Cost: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Cost:  (Default: 1)\n  :rtype Cost: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Cost:  (Default: 0)\n  :rtype Cost: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) ConvertLocationToIndex3DNaive(exec then, Vector Vector)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets a location and finds the closest corresponding location. Does not take overlapping tiles into account\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Gets a location and finds the closest corresponding location. Does not take overlapping tiles into account\n\n  :arg then: \n  :type then: exec\n  :arg Vector: \n  :type Vector: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns Index:  (Default: 0)\n  :rtype Index: int</code></pre></div>\n<p>.. cpp:function:: exec SetupGridArrays(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Container function running functions in order for creating grid locations and connecting them\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Container function running functions in order for creating grid locations and connecting them\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec AddSubgrids(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Loops through all subgrids placed in the world and adds them to the grid managers locations.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Loops through all subgrids placed in the world and adds them to the grid managers locations.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetTileBaseEdges(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Returns the default relative grid indexes representing the default neighbors for any tile. Must be added to a grid index value after this function to get the actual neighbors\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Returns the default relative grid indexes representing the default neighbors for any tile. Must be added to a grid index value after this function to get the actual neighbors\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns BaseEdges: \n  :rtype BaseEdges: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool) FindAndStoreTileScale(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Looks at the default tile mesh and scales tile size to fit\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Looks at the default tile mesh and scales tile size to fit\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) GetDisplayTileLocationFromIndex(exec then, int Index, int SizeX, int SizeY)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Converts an index to a location before GridLocations has been generated. If GridLocations has been created, generally use it instead\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Converts an index to a location before GridLocations has been generated. If GridLocations has been created, generally use it instead\n\n  :arg then: \n  :type then: exec\n  :arg Index: \n  :type Index: int\n  :arg SizeX: \n  :type SizeX: int\n  :arg SizeY: \n  :type SizeY: int\n  :returns execute: \n  :rtype execute: exec\n  :returns ReturnValue:  (Default: 0, 0, 0)\n  :rtype ReturnValue: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) FindClosestTileToSnapTo(exec then, Vector Location)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Rounds off a location to the closest tile center\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Rounds off a location to the closest tile center\n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns SnapLocation:  (Default: 0, 0, 0)\n  :rtype SnapLocation: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) FindClosestTileToSnapToTrace(exec then, Vector Location, Actor ActorsToIgnore)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Rounds off a location to the closest tile center, tracing for the ground to set the Z location.\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Rounds off a location to the closest tile center, tracing for the ground to set the Z location.\n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :arg ActorsToIgnore: \n  :type ActorsToIgnore: Actor\n  :returns execute: \n  :rtype execute: exec\n  :returns SnapLocation:  (Default: 0, 0, 0)\n  :rtype SnapLocation: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindUnitsInRangeBig(exec then, int GridIndex, int Range, bool DiamondShaped)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds units in range, taking into account the unit's offset if it is a big unit occupying the space between tiles\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds units in range, taking into account the unit's offset if it is a big unit occupying the space between tiles\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Range: \n  :type Range: int\n  :arg DiamondShaped: \n  :type DiamondShaped: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns UnitIndexes: \n  :rtype UnitIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool) RemoveUnitFromGridBig(exec then, BP_Unit Unit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Removes all references of the unit from the grid. Note that this does not alter the GridBigUnits TMap, so make sure to also update this if needed.\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Removes all references of the unit from the grid. Note that this does not alter the GridBigUnits TMap, so make sure to also update this if needed.\n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: (exec, FTwoInts) GetCrossingCornerEdges(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds the tile/edge pairs representing the connections that cross the edges of this tile. Used for blocking off corners so that units cannot clip through corners of tiles when moving diagonally past a solid wall.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds the tile/edge pairs representing the connections that cross the edges of this tile. Used for blocking off corners so that units cannot clip through corners of tiles when moving diagonally past a solid wall.\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns CornerEdges: \n  :rtype CornerEdges: FTwoInts</code></pre></div>\n<p>.. cpp:function:: (exec, FNestedIntArray) CreateBigSizeIndexes(exec then, FNestedIntXY PrepBigSizeIndexes)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Generate Big Size Indexes holding relative grid indexes for each size category, from manually made, grid-size independent preparation array\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Generate Big Size Indexes holding relative grid indexes for each size category, from manually made, grid-size independent preparation array\n\n  :arg then: \n  :type then: exec\n  :arg PrepBigSizeIndexes: \n  :type PrepBigSizeIndexes: FNestedIntXY\n  :returns execute: \n  :rtype execute: exec\n  :returns BigSizeIndexes: \n  :rtype BigSizeIndexes: FNestedIntArray</code></pre></div>\n<p>.. cpp:function:: (exec, FBigSearch) GenerateBigSearchPatterns(exec then, FBigSearchNew PrepSearchPatterns)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Generate Search Pattern to be used later in this function, created from manual grid-independent values to grid-dependent values\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Generate Search Pattern to be used later in this function, created from manual grid-independent values to grid-dependent values\n\n  :arg then: \n  :type then: exec\n  :arg PrepSearchPatterns: \n  :type PrepSearchPatterns: FBigSearchNew\n  :returns execute: \n  :rtype execute: exec\n  :returns SearchPatterns: \n  :rtype SearchPatterns: FBigSearch</code></pre></div>\n<p>.. cpp:function:: (exec, FBigCarryOver) CreateBigTileSizeMods(exec then, FBigCarryOverPrep PrepTileSizeModCalculations)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Creates grid-dependent pattern of size values to be stored in each accessible tile, from grid-independent manually entered values\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Creates grid-dependent pattern of size values to be stored in each accessible tile, from grid-independent manually entered values\n\n  :arg then: \n  :type then: exec\n  :arg PrepTileSizeModCalculations: \n  :type PrepTileSizeModCalculations: FBigCarryOverPrep\n  :returns execute: \n  :rtype execute: exec\n  :returns TileSizeModCalculations: \n  :rtype TileSizeModCalculations: FBigCarryOver</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool) AddBigUnitToGridUnitsMap(exec then, BP_Unit Unit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds the big unit to the GridUnits TMap for all tiles it occupies\n\n  Category: Big\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Adds the big unit to the GridUnits TMap for all tiles it occupies\n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetTileInDirection(exec then, int GridIndex, EDirection Direction=NewEnumerator0)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Returns the neigbor of the input tile in the selected direction\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  Returns the neigbor of the input tile in the selected direction\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Direction:  (Default: NewEnumerator0)\n  :type Direction: EDirection\n  :returns execute: \n  :rtype execute: exec\n  :returns ReturnIndex:  (Default: 0)\n  :rtype ReturnIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, int) ConvertGridIndexesToAllLevels(exec then, int FlooredGridIndexes)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes an array of grid indexes at level 0 and returns grid indexes on all levels\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Takes an array of grid indexes at level 0 and returns grid indexes on all levels\n\n  :arg then: \n  :type then: exec\n  :arg FlooredGridIndexes: \n  :type FlooredGridIndexes: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridIndexesAllLevels: \n  :rtype GridIndexesAllLevels: int</code></pre></div>\n<p>.. cpp:function:: exec UpdateHeightmapCache(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Creates an array that holds all levels stored at the different grid indexes for easy lookup\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Creates an array that holds all levels stored at the different grid indexes for easy lookup\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool, Object, exec, bool, Object, exec, bool, Object) FindSpecificObjectsOnGrid(exec then, int GridIndex, Object ObjectClass)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds and returns objects of a specified type on the specified grid index (that have been added to the grid using AddObjectToGrid)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds and returns objects of a specified type on the specified grid index (that have been added to the grid using AddObjectToGrid)\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg ObjectClass: \n  :type ObjectClass: Object\n  :returns execute: \n  :rtype execute: exec\n  :returns bObjectFound:  (Default: false)\n  :rtype bObjectFound: bool\n  :returns ObjectRefs: \n  :rtype ObjectRefs: Object\n  :returns execute: \n  :rtype execute: exec\n  :returns bObjectFound:  (Default: false)\n  :rtype bObjectFound: bool\n  :returns ObjectRefs: \n  :rtype ObjectRefs: Object\n  :returns execute: \n  :rtype execute: exec\n  :returns bObjectFound:  (Default: false)\n  :rtype bObjectFound: bool\n  :returns ObjectRefs: \n  :rtype ObjectRefs: Object</code></pre></div>\n<p>.. cpp:function:: (exec, bool, Object, exec, bool, Object) FindObjectClassesOnGrid(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Returns all object classes contained on the specified grid index (that have been added to the grid using AddObjectToGrid)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Returns all object classes contained on the specified grid index (that have been added to the grid using AddObjectToGrid)\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bObjectFound:  (Default: false)\n  :rtype bObjectFound: bool\n  :returns Classes: \n  :rtype Classes: Object\n  :returns execute: \n  :rtype execute: exec\n  :returns bObjectFound:  (Default: false)\n  :rtype bObjectFound: bool\n  :returns Classes: \n  :rtype Classes: Object</code></pre></div>\n<p>.. cpp:function:: (exec, exec) AddSpecialEdge(exec then, int TileIndex, int EdgeIndex, GameplayTag SpecialEdge)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Marks an edge as special as specified. By default only used for animation special movement animations (see BP_Unit_Anim_Ex)\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Marks an edge as special as specified. By default only used for animation special movement animations (see BP_Unit_Anim_Ex)\n\n  :arg then: \n  :type then: exec\n  :arg TileIndex: \n  :type TileIndex: int\n  :arg EdgeIndex: \n  :type EdgeIndex: int\n  :arg SpecialEdge: \n  :type SpecialEdge: GameplayTag\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int) SetupBaseEdges(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Filles the BaseEdges array with the appropriate relative indexes of neighbor tiles\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Filles the BaseEdges array with the appropriate relative indexes of neighbor tiles\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns BaseEdges: \n  :rtype BaseEdges: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, exec, bool, int, exec, bool, int, exec, bool, int) FindCloseValidOverlappingGridIndex(exec then, Vector Location)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: For multilevel grids. Takes a location and searches for the closest (in height) level with a valid tile location overlapping the XY location of the input\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  For multilevel grids. Takes a location and searches for the closest (in height) level with a valid tile location overlapping the XY location of the input\n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns GridIndex:  (Default: -1)\n  :rtype GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns GridIndex:  (Default: -1)\n  :rtype GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool, exec, bool, exec, bool) AddGridIndexAtRuntime(exec then, Vector NewGridLocation)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds a new grid location to the grid and connects it appropriately to surrounding edges\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds a new grid location to the grid and connects it appropriately to surrounding edges\n\n  :arg then: \n  :type then: exec\n  :arg NewGridLocation: \n  :type NewGridLocation: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool</code></pre></div>\n<p>.. cpp:function:: exec AddTileEdgesNoHeightmap(exec then, int GridIndex, bool bTraceForWalls)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds edges from a tile to neighboring tiles for flat grids\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds edges from a tile to neighboring tiles for flat grids\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg bTraceForWalls: \n  :type bTraceForWalls: bool\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: void AddTileEdgesOneLevelHeightmap(exec then, int GridIndex, bool bTraceForWalls)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds edges from a tile to neighboring tiles for single-level grids with heightmap\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds edges from a tile to neighboring tiles for single-level grids with heightmap\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg bTraceForWalls: \n  :type bTraceForWalls: bool</code></pre></div>\n<p>.. cpp:function:: void AddTileEdgesMultilevelHeightmap(exec then, int GridIndex, bool bTraceForWalls)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Adds edges from a tile to neighboring tiles for multi-level grid\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Adds edges from a tile to neighboring tiles for multi-level grid\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg bTraceForWalls: \n  :type bTraceForWalls: bool</code></pre></div>\n<p>.. cpp:function:: (exec, int) DrawLineOnGrid(exec then, int StartIndex, int EndIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg EndIndex: \n  :type EndIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridIndexes: \n  :rtype GridIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, exec, bool, int, exec, bool, int, exec, bool, int, exec, bool, int) FindClosestValidEmptyTile(exec then, Vector Location, int MaxRange)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :arg MaxRange: \n  :type MaxRange: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns TileIndex:  (Default: 0)\n  :rtype TileIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns TileIndex:  (Default: 0)\n  :rtype TileIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns TileIndex:  (Default: -1)\n  :rtype TileIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns TileIndex:  (Default: 0)\n  :rtype TileIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns TileIndex:  (Default: -1)\n  :rtype TileIndex: int</code></pre></div>\n<p>.. cpp:function:: exec UpdateTilesInRange(exec then, int Range, int TileIndex, Vector TileLocation, bool bUseIndex, bool bDiamondShaped, bool bTraceForWallsIn=true)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Updates the locations and edges of all tiles in a specified range from a source index\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Updates the locations and edges of all tiles in a specified range from a source index\n\n  :arg then: \n  :type then: exec\n  :arg Range: \n  :type Range: int\n  :arg TileIndex: \n  :type TileIndex: int\n  :arg TileLocation: \n  :type TileLocation: Vector\n  :arg bUseIndex: \n  :type bUseIndex: bool\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg bTraceForWallsIn:  (Default: true)\n  :type bTraceForWallsIn: bool\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec, exec) Add_Grid_Index_to_Grid_Locations(exec then, int GridIndex, EHeight Heightmap=NewEnumerator0)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Updates the GridLocation of a specified grid index based on collision\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Updates the GridLocation of a specified grid index based on collision\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Heightmap:  (Default: NewEnumerator0)\n  :type Heightmap: EHeight\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: exec AddGridIndexToGridEdges(exec then, int GridIndex, bool bTraceForWallsIn, EHeight Heightmap=NewEnumerator0)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Updates the edges of a specified grid index based on collision\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  Updates the edges of a specified grid index based on collision\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg bTraceForWallsIn: \n  :type bTraceForWallsIn: bool\n  :arg Heightmap:  (Default: NewEnumerator0)\n  :type Heightmap: EHeight\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetAllGridIndexesNaive(exec then, int NumTilesX, int NumTilesY, int GridIndexOffset)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Returns all grid indexes in a specified rectangular area and offset by a specified grid index. Purely math based and does not use any generated grid data\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Returns all grid indexes in a specified rectangular area and offset by a specified grid index. Purely math based and does not use any generated grid data\n\n  :arg then: \n  :type then: exec\n  :arg NumTilesX: \n  :type NumTilesX: int\n  :arg NumTilesY: \n  :type NumTilesY: int\n  :arg GridIndexOffset: \n  :type GridIndexOffset: int\n  :returns execute: \n  :rtype execute: exec\n  :returns GridIndexes: \n  :rtype GridIndexes: int</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) GetWorldLocationAtIndex(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Location:  (Default: 0, 0, 0)\n  :rtype Location: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) GetOffsetWorldLocationAtIndex(exec then, int GridIndex, double Offset)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Offset: \n  :type Offset: double\n  :returns execute: \n  :rtype execute: exec\n  :returns Location:  (Default: 0, 0, 0)\n  :rtype Location: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, BP_Path, exec, BP_Path, exec, BP_Path) FindOrCreatePathfindingType(exec then, BP_Path PathfindingTypeClass)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg PathfindingTypeClass: \n  :type PathfindingTypeClass: BP_Path\n  :returns execute: \n  :rtype execute: exec\n  :returns PathfindingType: \n  :rtype PathfindingType: BP_Path\n  :returns execute: \n  :rtype execute: exec\n  :returns PathfindingType: \n  :rtype PathfindingType: BP_Path\n  :returns execute: \n  :rtype execute: exec\n  :returns PathfindingType: \n  :rtype PathfindingType: BP_Path</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) ConvertIndexToLocationNaive(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: True\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Location:  (Default: 0, 0, 0)\n  :rtype Location: Vector</code></pre></div>\n<p>.. cpp:function:: exec PrintElapsedTime(exec then, LinearColor TextColor=(R=1.000000,G=1.000000,B=1.000000,A=1.000000), string Label, bool bDoNotLog, double Duration=5.000000)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: For debugging. Prints the time passed in milliseconds since this function was last run\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  For debugging. Prints the time passed in milliseconds since this function was last run\n\n  :arg then: \n  :type then: exec\n  :arg TextColor:  (Default: (R=1.000000,G=1.000000,B=1.000000,A=1.000000))\n  :type TextColor: LinearColor\n  :arg Label: \n  :type Label: string\n  :arg bDoNotLog: \n  :type bDoNotLog: bool\n  :arg Duration:  (Default: 5.000000)\n  :type Duration: double\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: void ScaleAutoVolumes(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec) SetupGridLineDisplay(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: If EnableGridLineDisplay is true, displays a decal showing grid lines on square grids, encompassing the size of the grid\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  If EnableGridLineDisplay is true, displays a decal showing grid lines on square grids, encompassing the size of the grid\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int, exec, int) GetIndexesInRectangularArea(exec then, int StartIndex, int SideX, int SideY, bool bAllLevels)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets all grid indexes within a set range of a tile index\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Gets all grid indexes within a set range of a tile index\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg SideX: \n  :type SideX: int\n  :arg SideY: \n  :type SideY: int\n  :arg bAllLevels: \n  :type bAllLevels: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns InRangeTiles: \n  :rtype InRangeTiles: int\n  :returns execute: \n  :rtype execute: exec\n  :returns InRangeTiles: \n  :rtype InRangeTiles: int</code></pre></div>\n<p>.. cpp:function:: exec UpdateTilesInRectangularArea(exec then, int NorthWestCornerIndex, int SideX=1, int SideY=1, Vector TileLocation, bool bUseIndex=true, bool bTraceForWallsIn=true)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Updates the locations and edges of all tiles in a specified range from a source index\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Updates the locations and edges of all tiles in a specified range from a source index\n\n  :arg then: \n  :type then: exec\n  :arg NorthWestCornerIndex: \n  :type NorthWestCornerIndex: int\n  :arg SideX:  (Default: 1)\n  :type SideX: int\n  :arg SideY:  (Default: 1)\n  :type SideY: int\n  :arg TileLocation: \n  :type TileLocation: Vector\n  :arg bUseIndex:  (Default: true)\n  :type bUseIndex: bool\n  :arg bTraceForWallsIn:  (Default: true)\n  :type bTraceForWallsIn: bool\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, int) GetAreaEncompassingGridIndexes(exec then, int GridIndexes, int ExtendBorder, bool bAllLevels=true)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Given the specified grid indexes, returns a rectangular grid area which extends to the input grid indexes. Beware that if the input grid indexes are far apart the returned area will be very large\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Given the specified grid indexes, returns a rectangular grid area which extends to the input grid indexes. Beware that if the input grid indexes are far apart the returned area will be very large\n\n  :arg then: \n  :type then: exec\n  :arg GridIndexes: \n  :type GridIndexes: int\n  :arg ExtendBorder: \n  :type ExtendBorder: int\n  :arg bAllLevels:  (Default: true)\n  :type bAllLevels: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns TilesInArea: \n  :rtype TilesInArea: int</code></pre></div>\n<p>.. cpp:function:: exec UpdateTilesEncompassingGridIndexes(exec then, int GridIndexes, bool bTraceForWallsIn=true)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Updates the locations and edges of all tiles in a specified range from a source index\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Updates the locations and edges of all tiles in a specified range from a source index\n\n  :arg then: \n  :type then: exec\n  :arg GridIndexes: \n  :type GridIndexes: int\n  :arg bTraceForWallsIn:  (Default: true)\n  :type bTraceForWallsIn: bool\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, bool) CheckForCompileError(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: For use in editor. Returns false if the grid manager currently has a compile error. Used as a check in the construction scripts of other actors that reference the grid manager as part of their construction script\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  For use in editor. Returns false if the grid manager currently has a compile error. Used as a check in the construction scripts of other actors that reference the grid manager as part of their construction script\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns NoError:  (Default: true)\n  :rtype NoError: bool</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, bool) GetValidatedWorldLocationAtIndex(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Location:  (Default: 0, 0, 0)\n  :rtype Location: Vector\n  :returns bValid:  (Default: false)\n  :rtype bValid: bool</code></pre></div>\n<p>.. cpp:function:: void SpawnDebugTileText(exec then, int GridIndex, text Text)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Spawns the specified text on the specified tile index\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Spawns the specified text on the specified tile index\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :arg Text: \n  :type Text: text</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, int) GetClosestAdjacentTileNaive(exec then, Vector Location)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: From a location, tries to find the closest adjacent tile purely through math, without referencing any grid arrays (useful for clients)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  From a location, tries to find the closest adjacent tile purely through math, without referencing any grid arrays (useful for clients)\n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns TileLocation:  (Default: 0, 0, 0)\n  :rtype TileLocation: Vector\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, int) GetClosestTileCenterNaive(exec then, Vector Vector)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets the tile center that is closest to the input location, based purely on math without referencing any grid arrays (useful for clients)\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event, Blueprint Pure\n\n  Gets the tile center that is closest to the input location, based purely on math without referencing any grid arrays (useful for clients)\n\n  :arg then: \n  :type then: exec\n  :arg Vector: \n  :type Vector: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns Location:  (Default: 0, 0, 0)\n  :rtype Location: Vector\n  :returns GridIndex:  (Default: 0)\n  :rtype GridIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, int, exec, bool, int, exec, bool, int) GetClosestAdjacentUnoccupiedTileInPathsMap(exec then, Vector Location, int Paths, bool bDiamondShaped, BP_Unit IgnoredUnit)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: From a location, tries to find the closest adjacent location that is unoccupied and within the input paths map\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  From a location, tries to find the closest adjacent location that is unoccupied and within the input paths map\n\n  :arg then: \n  :type then: exec\n  :arg Location: \n  :type Location: Vector\n  :arg Paths: \n  :type Paths: int\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :arg IgnoredUnit: \n  :type IgnoredUnit: BP_Unit\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: true)\n  :rtype bSuccess: bool\n  :returns ClosestGridIndex:  (Default: 0)\n  :rtype ClosestGridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns ClosestGridIndex:  (Default: -1)\n  :rtype ClosestGridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bSuccess:  (Default: false)\n  :rtype bSuccess: bool\n  :returns ClosestGridIndex:  (Default: -1)\n  :rtype ClosestGridIndex: int</code></pre></div>\n<p>.. cpp:function:: (exec, exec) DisplayTransformWarningIfRelevant(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, FOutlineKey) GetPathfindingEdgeDirections(exec then, int PathsMap)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all grid indexes that are at the edge of an output map of grid indexes from the RunPathfinding function\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all grid indexes that are at the edge of an output map of grid indexes from the RunPathfinding function\n\n  :arg then: \n  :type then: exec\n  :arg PathsMap: \n  :type PathsMap: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Edges: \n  :rtype Edges: FOutlineKey</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) CreateSplinePathFromEdgeDirections(exec then, FOutlineKey EdgeDirections, FOutlineOffset OutlineOffset, double OutlineOffset_Straight_7_83AA9A3E44253E55561270B774C89B28, double OutlineOffset_Corner_8_6518226346DA09AC32A527A77D12F5D7, double OutlineOffset_ShortSegment_9_269ABAB740F75E844B634D9C6977040E, double OutlineOffset_ThinTurn_11_2CD46519481E320A41BE3895555DFD53)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes edges of tiles (generally representing walls and the outside of marked areas) from GetTileArrayEdgeDirections and creates an ordered path of points outlining these tiles\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Takes edges of tiles (generally representing walls and the outside of marked areas) from GetTileArrayEdgeDirections and creates an ordered path of points outlining these tiles\n\n  :arg then: \n  :type then: exec\n  :arg EdgeDirections: \n  :type EdgeDirections: FOutlineKey\n  :arg OutlineOffset: \n  :type OutlineOffset: FOutlineOffset\n  :arg OutlineOffset_Straight_7_83AA9A3E44253E55561270B774C89B28: \n  :type OutlineOffset_Straight_7_83AA9A3E44253E55561270B774C89B28: double\n  :arg OutlineOffset_Corner_8_6518226346DA09AC32A527A77D12F5D7: \n  :type OutlineOffset_Corner_8_6518226346DA09AC32A527A77D12F5D7: double\n  :arg OutlineOffset_ShortSegment_9_269ABAB740F75E844B634D9C6977040E: \n  :type OutlineOffset_ShortSegment_9_269ABAB740F75E844B634D9C6977040E: double\n  :arg OutlineOffset_ThinTurn_11_2CD46519481E320A41BE3895555DFD53: \n  :type OutlineOffset_ThinTurn_11_2CD46519481E320A41BE3895555DFD53: double\n  :returns execute: \n  :rtype execute: exec\n  :returns Path: \n  :rtype Path: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, exec, Vector) CleanSplinePath(exec then, Vector Path)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes a path of locations and cleans it by removing points that are unnecessary for drawing the path, since they are directly between two other points and going in the same direction\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Takes a path of locations and cleans it by removing points that are unnecessary for drawing the path, since they are directly between two other points and going in the same direction\n\n  :arg then: \n  :type then: exec\n  :arg Path: \n  :type Path: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns CleanedPath: \n  :rtype CleanedPath: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns CleanedPath: \n  :rtype CleanedPath: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindVisibleTilesFromTilesInRange(exec then, int StartIndex, int InRangeTiles, double MaxZDifference, int MinimumRange=1, bool bCheckVisibility, bool bDiamondShaped)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets an array of tiles outputted by FindTilesInRange and keeps the ones that are visible from the specified start index\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Gets an array of tiles outputted by FindTilesInRange and keeps the ones that are visible from the specified start index\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg InRangeTiles: \n  :type InRangeTiles: int\n  :arg MaxZDifference: \n  :type MaxZDifference: double\n  :arg MinimumRange:  (Default: 1)\n  :type MinimumRange: int\n  :arg bCheckVisibility: \n  :type bCheckVisibility: bool\n  :arg bDiamondShaped: \n  :type bDiamondShaped: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns InSightTiles: \n  :rtype InSightTiles: int</code></pre></div>\n<p>.. cpp:function:: (exec, bool, exec, bool) CheckIfTileIsVisibleFromOtherTileSimple(exec then, int Start_Index, int TargetIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Checks if tile can be seen from another, using line trace if specified\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Checks if tile can be seen from another, using line trace if specified\n\n  :arg then: \n  :type then: exec\n  :arg Start_Index: \n  :type Start_Index: int\n  :arg TargetIndex: \n  :type TargetIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: false)\n  :rtype bVisible: bool\n  :returns execute: \n  :rtype execute: exec\n  :returns bVisible:  (Default: false)\n  :rtype bVisible: bool</code></pre></div>\n<p>.. cpp:function:: (exec, int) FindVisibleTilesFromTilesInRangeSimple(exec then, int StartIndex, int InRangeTiles)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Gets an array of tiles outputted by FindTilesInRange and keeps the ones that are visible from the specified start index\n\n  Category: Visibility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Gets an array of tiles outputted by FindTilesInRange and keeps the ones that are visible from the specified start index\n\n  :arg then: \n  :type then: exec\n  :arg StartIndex: \n  :type StartIndex: int\n  :arg InRangeTiles: \n  :type InRangeTiles: int\n  :returns execute: \n  :rtype execute: exec\n  :returns InSightTiles: \n  :rtype InSightTiles: int</code></pre></div>\n<p>.. cpp:function:: (exec, Vector) AdjustPointsToTerrain(exec then, Vector Points)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes a path of locations and adjusts it to the underlying terrain by tracing downwards\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Takes a path of locations and adjusts it to the underlying terrain by tracing downwards\n\n  :arg then: \n  :type then: exec\n  :arg Points: \n  :type Points: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns AdjustedPoints: \n  :rtype AdjustedPoints: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, Vector, Vector, Vector, Vector, Vector, Vector, Vector) GenerateOutlineFramePoints(exec then, double OutlineOffset, double CornerOffset, double ShortSegmentOffset, double ThinTurnOffset)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Generates the points relative to a tile center which will be used to build an outline around these tiles\n\n  Category: Miscellaneous\n\n  Access Modifier: Private\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Generates the points relative to a tile center which will be used to build an outline around these tiles\n\n  :arg then: \n  :type then: exec\n  :arg OutlineOffset: \n  :type OutlineOffset: double\n  :arg CornerOffset: \n  :type CornerOffset: double\n  :arg ShortSegmentOffset: \n  :type ShortSegmentOffset: double\n  :arg ThinTurnOffset: \n  :type ThinTurnOffset: double\n  :returns execute: \n  :rtype execute: exec\n  :returns InCornerStarts: \n  :rtype InCornerStarts: Vector\n  :returns InCornerEnds: \n  :rtype InCornerEnds: Vector\n  :returns InSegments: \n  :rtype InSegments: Vector\n  :returns OutSegments: \n  :rtype OutSegments: Vector\n  :returns OutCornerStarts: \n  :rtype OutCornerStarts: Vector\n  :returns OutCornerEnds: \n  :rtype OutCornerEnds: Vector\n  :returns ThinTurnStarts: \n  :rtype ThinTurnStarts: Vector\n  :returns ThinTurnEnds: \n  :rtype ThinTurnEnds: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, Vector, exec, Vector) CreateOutlineUsingFramePoints(exec then, FOutlineKey EdgeDirections, Vector InCornerStarts, Vector InCornerEnds, Vector InSegments, Vector OutSegments, Vector OutCornerStarts, Vector OutCornerEnds, Vector ThinTurnStarts, Vector ThinTurnEnds)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Using frame points from GenerateOutlineFramePoints and edges from CreateSplinePathFromEdgeDirections, searches through all edges to link up all points in order so that they form an outline\n\n  Category: Miscellaneous\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Using frame points from GenerateOutlineFramePoints and edges from CreateSplinePathFromEdgeDirections, searches through all edges to link up all points in order so that they form an outline\n\n  :arg then: \n  :type then: exec\n  :arg EdgeDirections: \n  :type EdgeDirections: FOutlineKey\n  :arg InCornerStarts: \n  :type InCornerStarts: Vector\n  :arg InCornerEnds: \n  :type InCornerEnds: Vector\n  :arg InSegments: \n  :type InSegments: Vector\n  :arg OutSegments: \n  :type OutSegments: Vector\n  :arg OutCornerStarts: \n  :type OutCornerStarts: Vector\n  :arg OutCornerEnds: \n  :type OutCornerEnds: Vector\n  :arg ThinTurnStarts: \n  :type ThinTurnStarts: Vector\n  :arg ThinTurnEnds: \n  :type ThinTurnEnds: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns OutlinePoints: \n  :rtype OutlinePoints: Vector\n  :returns execute: \n  :rtype execute: exec\n  :returns OutlinePoints: \n  :rtype OutlinePoints: Vector</code></pre></div>\n<p>.. cpp:function:: (exec, exec) RemoveNarrowDiagonalEdges(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: If enabled, removes diagonal edges where any of the straight edges snaking to the same tile are blocked in either direction. Generally prevents units from being able to cut through wall corners during movement.\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  If enabled, removes diagonal edges where any of the straight edges snaking to the same tile are blocked in either direction. Generally prevents units from being able to cut through wall corners during movement.\n\n  :arg then: \n  :type then: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, exec, exec) RemoveNarrowDiagonalEdgesOfTile(exec then, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Used within RemoveNarrowDiagonalEdges for an individual tile\n\n  Category: Startup\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Defaults, Blueprint Callable, Blueprint Event\n\n  Used within RemoveNarrowDiagonalEdges for an individual tile\n\n  :arg then: \n  :type then: exec\n  :arg GridIndex: \n  :type GridIndex: int\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: (exec, FOutlineKey) GetTileArrayEdgeDirections(exec then, int GridIndexes)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Finds all grid indexes that are at the edge of an output map of grid indexes from the RunPathfinding function\n\n  Category: Pathfinding\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Finds all grid indexes that are at the edge of an output map of grid indexes from the RunPathfinding function\n\n  :arg then: \n  :type then: exec\n  :arg GridIndexes: \n  :type GridIndexes: int\n  :returns execute: \n  :rtype execute: exec\n  :returns Edges: \n  :rtype Edges: FOutlineKey</code></pre></div>\n<p>.. cpp:function:: exec TransformGridLocationsToWorld(exec then, Vector Locations)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Takes an array of locations in grid space and converts them to world space\n\n  Category: Utility\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Has Defaults, Blueprint Callable, Blueprint Event\n\n  Takes an array of locations in grid space and converts them to world space\n\n  :arg then: \n  :type then: exec\n  :arg Locations: \n  :type Locations: Vector\n  :returns execute: \n  :rtype execute: exec</code></pre></div>\n<p>.. cpp:function:: void EndAction(exec then, bool bAutoProceed=false)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg bAutoProceed: Auto Proceed Boolean (Default: false)\n  :type bAutoProceed: bool</code></pre></div>\n<p>.. cpp:function:: void AnimateAction(exec then, BP_ActionManager CallingActionManager)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg CallingActionManager: Calling Action Manager BP Action Manager Object Reference\n  :type CallingActionManager: BP_ActionManager</code></pre></div>\n<p>.. cpp:function:: void RunOnSkipAction(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: void InteractOnUnitExit(exec then, BP_Unit Unit, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: \n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :arg GridIndex: \n  :type GridIndex: int</code></pre></div>\n<p>.. cpp:function:: void AttemptPlayNextAction(exec then, bool bIgnoreBlockingActions=false)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg bIgnoreBlockingActions: Ignore Blocking Actions Boolean (Default: false)\n  :type bIgnoreBlockingActions: bool</code></pre></div>\n<p>.. cpp:function:: void BeginPlay(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: Event when play begins for this actor.\n\n  Category: \n\n  Access Modifier: Protected\n\n  Constant: False\n\n  Flags: Event, Blueprint Event\n\n  Event when play begins for this actor.\n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: void QueueAction(exec then, Object Action)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg Action: Action Object Reference\n  :type Action: Object</code></pre></div>\n<p>.. cpp:function:: void AddToVectorArrayToManager(exec then, Vector Vectors)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg Vectors: Vectors Array of Vectors\n  :type Vectors: Vector</code></pre></div>\n<p>.. cpp:function:: void InteractOnUnitEnd(exec then, BP_Unit Unit, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: \n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :arg GridIndex: \n  :type GridIndex: int</code></pre></div>\n<p>.. cpp:function:: void InteractOnUnitEnter(exec then, BP_Unit Unit, int GridIndex)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: \n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg Unit: \n  :type Unit: BP_Unit\n  :arg GridIndex: \n  :type GridIndex: int</code></pre></div>\n<p>.. cpp:function:: void SetupDispatcherEvents(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: \n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: void ForcePlayAction(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: void ProceedFromOngoingAction(exec then, Object OngoingAction, EActionProceedRule ProceedRule=NewEnumerator0)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Has Out Params, Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg OngoingAction: Ongoing Action Object Reference (by ref)\n  :type OngoingAction: Object\n  :arg ProceedRule: Proceed Rule EActionProceedRule Enum (Default: NewEnumerator0)\n  :type ProceedRule: EActionProceedRule</code></pre></div>\n<p>.. cpp:function:: void ActivateGridManager(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: \n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:function:: void AdvanceActionDestructionQueue(exec then, Object CallingAction)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: Default\n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec\n  :arg CallingAction: Calling Action Object Reference\n  :type CallingAction: Object</code></pre></div>\n<p>.. cpp:function:: void ProceedFromThisAction(exec then)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Type: \n\n  Category: \n\n  Access Modifier: Public\n\n  Constant: False\n\n  Flags: Blueprint Callable, Blueprint Event\n\n  \n\n  :arg then: \n  :type then: exec</code></pre></div>\n<p>.. cpp:member:: PointerToUberGraphFrame UberGraphFrame</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: \n\n  Access Modifier: \n  Flags: Zero Constructor, Transit, Duplicate Transient\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: DecalComponent GridDecal</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Blueprint Visible, Zero Constructor, Instanced Reference, Non Transactional, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: HierarchicalInstancedStaticMeshComponent DebugMarker</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Blueprint Visible, Zero Constructor, Instanced Reference, Non Transactional, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: HierarchicalInstancedStaticMeshComponent DefaultTile</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Blueprint Visible, Zero Constructor, Instanced Reference, Non Transactional, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: BoxComponent HeightmapBounds</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Blueprint Visible, Zero Constructor, Instanced Reference, Non Transactional, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: StaticMeshComponent CollisionPlane</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Blueprint Visible, Zero Constructor, Instanced Reference, Non Transactional, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: SceneComponent Scene</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Blueprint Visible, Zero Constructor, Instanced Reference, Non Transactional, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: int GridSizeX</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The size in tiles of the grid in the X dimension</code></pre></div>\n<p>.. cpp:member:: int GridSizeY</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The size in tiles of the grid in the Y dimension</code></pre></div>\n<p>.. cpp:member:: int GridSizeZ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Derived\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bShowCollisionPlane</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Shows the collision plane that handles collision for the trace when the player clicks a tile. Make it visible if your default tile is invisible to place actors easily on the grid surface.</code></pre></div>\n<p>.. cpp:member:: bool bCollisionPlaneWalkable</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Is the default tile that makes up the grid walkable? If not, individual walkable tiles must be placed.</code></pre></div>\n<p>.. cpp:member:: bool bShowDefaultTile</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Will the default tile, and thus the initial grid, be visible?</code></pre></div>\n<p>.. cpp:member:: int8 Heightmap</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  false = no heightmap; OneLevel = traces from the sky (at MaxGridHeight) to the center of each tile once to generate a single layer heightmap; Multilevel = Traces from sky to each tile center, then continues downward and adds a level for each level found that is further from the previous than HeightBetweenLevels until MaxLevels or MinGridHeight is reached</code></pre></div>\n<p>.. cpp:member:: bool bTraceForWalls</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Automaticalle traces between all adjacent tiles using RangeTrace and removes the edge between tiles if the trace hits.</code></pre></div>\n<p>.. cpp:member:: double TraceForWallsHeight</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The height at which the Trace for Walls function should check for walls between tiles</code></pre></div>\n<p>.. cpp:member:: bool bAutoEdgeCostsBasedOnHeight</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Compares height of all adjacent tiles and sets walkability to false if the difference is more that HeightImpassableCutoff and to difference/heightSlowIncrement if lower than HeightImpassableCutoff but lower that HeightSlowIncrement</code></pre></div>\n<p>.. cpp:member:: double HeightImpassableCutoff</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  See AutoHeightBasedEdgeCosts</code></pre></div>\n<p>.. cpp:member:: double HeightSlowIncrement</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  See AutoHeightBasedEdgeCosts</code></pre></div>\n<p>.. cpp:member:: StaticMesh DefaultTileMesh</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Mesh used to populate the ground level of a grid</code></pre></div>\n<p>.. cpp:member:: Class GridUIClass</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Class DefaultPathfindingType</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bDiagonalMovement</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  If set to false tiles will not be connected to diagonal tiles by default</code></pre></div>\n<p>.. cpp:member:: bool bDebugPregenerateGameplayGrids</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Debug\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Generates some of the grids used for gameplay in the construction scripts for debugging purposes (check this along with DisplayTileIndexes and DisplayTileEdges to visualize this data in editor)</code></pre></div>\n<p>.. cpp:member:: bool bDebugDisplayTileIndexes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Debug\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  For debugging. Displays the tile indexes of all tiles in the viewport. Pregenerate Gameplay Grids must be set to true for this to work.</code></pre></div>\n<p>.. cpp:member:: bool bDebugDisplayTileEdges</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Debug\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  For debugging. Displays the edges of all tiles in the viewport. Pregenerate Gameplay Grids must be set to true for this to work.</code></pre></div>\n<p>.. cpp:member:: double VisibilityTraceHeight</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The height of the visibility tracing of pawns</code></pre></div>\n<p>.. cpp:member:: bool bGridSetupDone</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Net, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: double TileXSize</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Size in X dimension of the default tile (cm)</code></pre></div>\n<p>.. cpp:member:: Array ISMTiles</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Derived\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance, Contains Instanced Reference\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Array ISMMeshes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Derived\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Array ISMMaterials</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Derived\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bFoundNoMaterialMatch</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: DO NDerivedOT EDIT\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: double TileYSize</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: double MaxGridHeight</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The height above the Grid Manager from which traces are done to find walkability. Meshes above this height will not be checked</code></pre></div>\n<p>.. cpp:member:: double MinGridHeight</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The height below the Grid Manager from which traces are done to find walkability. Meshes below this height will not be checked</code></pre></div>\n<p>.. cpp:member:: int8 ShowHeightmapBoundingBox</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Shows a bounding box displaying the maximum and minimum Z location the Grid Manager will check for walkable tiles when using heightmaps.</code></pre></div>\n<p>.. cpp:member:: double HeightBetweenLevels</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  The minimum distance that must separate two levels on a multi-level grid</code></pre></div>\n<p>.. cpp:member:: InstancedStaticMeshComponent ArrowFlat</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Instanced Reference, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: int MaxLevels</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  If heightmap is set to multilevel, designates the maximum number of levels that will be generated. Any levels above this will be ignored. I recommend not having this higher than the maximum number of levels you want for your map, as this causes unneccessary processing.</code></pre></div>\n<p>.. cpp:member:: Array ReachableTileMarkers</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible\n  Lifetime Condition: None\n\n  Requires pregenerating gameplay grids. Add elements to this array and position them using widgets to specify what areas of a map can be reached. Is not necessary, but will prevent the hover marker from showing over tiles the player cannot reach. Uses pathfinding to find all tiles reachable from the specified locations, and removes all else from the grid.</code></pre></div>\n<p>.. cpp:member:: MulticastInlineDelegate OnUnitEnterTileSimulate</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Blueprint Assignable, Blueprint Callable\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: MulticastInlineDelegate OnUnitExitTileSimulate</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Blueprint Assignable, Blueprint Callable\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map GridUnits</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  Holds the grid index location of all units</code></pre></div>\n<p>.. cpp:member:: BP_ATBTT_State GameStateRef</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: References\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Template, Disable Edit On Instance, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: BP_TurnManager TurnManager</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: References\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Template, Disable Edit On Instance, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Set SearchedTiles</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  Stores GridIndexes of all tiles that have been search during one Pathfinding</code></pre></div>\n<p>.. cpp:member:: Map GridLocations</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  Holds the location of all tile indexes. To instead go from location to index use the Vector To Index macro.</code></pre></div>\n<p>.. cpp:member:: bool bGridHasHoles</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map GridBigIndexes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: int MaxUnitSize</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  0 means big units are disabled. The maximum size of unit that the grid will genrate walkability for. What each size represents is defined in GenerateBigUnitArray function.</code></pre></div>\n<p>.. cpp:member:: Map GridSimpleCosts</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Array BigSizeIndexes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map GridBigSizeMods</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bUseSimpleCosts</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Expose On Spawn, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  If true, an extra map is used for walkability in addition to GridEdges, which allows tiles to have global costs, which can be simpler to work with, particularly for games requiring lots of live walkability modification. Interacts with the pathfinding types starting with Simple</code></pre></div>\n<p>.. cpp:member:: MulticastInlineDelegate OnUnitEndMovementSimulate</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Blueprint Assignable, Blueprint Callable\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map GridObjects</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  Unused in the base toolkit, but useful for adding custom tile functionality</code></pre></div>\n<p>.. cpp:member:: Array BigSizeIndexesOdd</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bSnapToCustomGrid</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  If true, GridActors will snap to the center of grid tiles when dragged in the viewport</code></pre></div>\n<p>.. cpp:member:: int IndexZ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: int IndexX</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map GridEdges</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Array BaseEdges</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: double DefaultTileWidth</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map HeightMapLevels</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Map SpecialEdges</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: GridArrays\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: int8 PathTraceChannel</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Channel used to trace for walkable tiles</code></pre></div>\n<p>.. cpp:member:: int8 RangeTraceChannel</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Channel used to trace for collison that blocks line of sight for units</code></pre></div>\n<p>.. cpp:member:: int8 WallTraceChannel</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  Channel used to trace for collison that blocks pathfinding. Used if bTraceForWalls is true.</code></pre></div>\n<p>.. cpp:member:: Map PathfindingTypes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Instance\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: Array AutoScaledVolumes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Disable Edit On Template\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: FDebugTime DebugTime</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: double GridLineThickness</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridLineDisplay\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: LinearColor GridLineColor</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridLineDisplay\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: double GridLineOpacity</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridLineDisplay\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool EnableGridLineDisplay</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridLineDisplay\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: MulticastInlineDelegate OnGridSetupDone</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Default\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Blueprint Assignable, Blueprint Callable\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: GameplayTagContainer MoveInteractEvents</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, GridOptions\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bDisplayTransformWarning</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Miscellaneous\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Disable Edit On Instance, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  </code></pre></div>\n<p>.. cpp:member:: bool bRemoveNarrowDiagonalEdges</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Category: Config, Procedural\n\n  Access Modifier: \n  Flags: Edit, Blueprint Visible, Zero Constructor, Is Plain Old Data, No Destructor, Has Get Value Type Hash\n  Lifetime Condition: None\n\n  If enabled, removes diagonal edges where any of the straight edges snaking to the same tile are blocked in either direction. Generally prevents units from being able to cut through wall corners during movement.</code></pre></div>","frontmatter":{"title":"BP_GridManager","date":"September 28, 2024","description":" Spawns the grid and all grid based arrays. Holds the location on the grid of all actors and the walkability between tiles. Runs pathfinding, visibility and all other grid-based code. Holds many such functions that are generally called by other blueprints. Also responsible for instantiating meshes."}},"previous":{"fields":{"slug":"/BPFL_Singletons/"},"frontmatter":{"title":"BPFL_Singletons"}},"next":null},"pageContext":{"id":"e66fde91-de2b-5df0-a075-48d941fbfe66","previousPostId":"3a44e00b-cd2c-54e3-bc65-b12b0b36787a","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}